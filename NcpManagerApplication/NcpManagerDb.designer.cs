#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NcpManagerApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NcpManagerDb")]
	public partial class NcpManagerDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertValoreCampoEsitoEsame(ValoreCampoEsitoEsame instance);
    partial void UpdateValoreCampoEsitoEsame(ValoreCampoEsitoEsame instance);
    partial void DeleteValoreCampoEsitoEsame(ValoreCampoEsitoEsame instance);
    partial void InsertAppuntamento(Appuntamento instance);
    partial void UpdateAppuntamento(Appuntamento instance);
    partial void DeleteAppuntamento(Appuntamento instance);
    partial void InsertAppuntamento_Esame(Appuntamento_Esame instance);
    partial void UpdateAppuntamento_Esame(Appuntamento_Esame instance);
    partial void DeleteAppuntamento_Esame(Appuntamento_Esame instance);
    partial void InsertCampoEsitoEsame(CampoEsitoEsame instance);
    partial void UpdateCampoEsitoEsame(CampoEsitoEsame instance);
    partial void DeleteCampoEsitoEsame(CampoEsitoEsame instance);
    partial void InsertEsame(Esame instance);
    partial void UpdateEsame(Esame instance);
    partial void DeleteEsame(Esame instance);
    partial void InsertMedicoGenerico(MedicoGenerico instance);
    partial void UpdateMedicoGenerico(MedicoGenerico instance);
    partial void DeleteMedicoGenerico(MedicoGenerico instance);
    partial void InsertMedicoSpecialista(MedicoSpecialista instance);
    partial void UpdateMedicoSpecialista(MedicoSpecialista instance);
    partial void DeleteMedicoSpecialista(MedicoSpecialista instance);
    partial void InsertPassword(Password instance);
    partial void UpdatePassword(Password instance);
    partial void DeletePassword(Password instance);
    partial void InsertPaziente(Paziente instance);
    partial void UpdatePaziente(Paziente instance);
    partial void DeletePaziente(Paziente instance);
    partial void InsertPaziente_Sindrome(Paziente_Sindrome instance);
    partial void UpdatePaziente_Sindrome(Paziente_Sindrome instance);
    partial void DeletePaziente_Sindrome(Paziente_Sindrome instance);
    partial void InsertSindrome(Sindrome instance);
    partial void UpdateSindrome(Sindrome instance);
    partial void DeleteSindrome(Sindrome instance);
    partial void InsertSpecializzazione(Specializzazione instance);
    partial void UpdateSpecializzazione(Specializzazione instance);
    partial void DeleteSpecializzazione(Specializzazione instance);
    #endregion
		
		public NcpManagerDbDataContext() : 
				base(global::NcpManagerApplication.Properties.Settings.Default.NcpManagerDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NcpManagerDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NcpManagerDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NcpManagerDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NcpManagerDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ValoreCampoEsitoEsame> ValoreCampoEsitoEsames
		{
			get
			{
				return this.GetTable<ValoreCampoEsitoEsame>();
			}
		}
		
		public System.Data.Linq.Table<Appuntamento> Appuntamentos
		{
			get
			{
				return this.GetTable<Appuntamento>();
			}
		}
		
		public System.Data.Linq.Table<Appuntamento_Esame> Appuntamento_Esames
		{
			get
			{
				return this.GetTable<Appuntamento_Esame>();
			}
		}
		
		public System.Data.Linq.Table<CampoEsitoEsame> CampoEsitoEsames
		{
			get
			{
				return this.GetTable<CampoEsitoEsame>();
			}
		}
		
		public System.Data.Linq.Table<Esame> Esames
		{
			get
			{
				return this.GetTable<Esame>();
			}
		}
		
		public System.Data.Linq.Table<MedicoGenerico> MedicoGenericos
		{
			get
			{
				return this.GetTable<MedicoGenerico>();
			}
		}
		
		public System.Data.Linq.Table<MedicoSpecialista> MedicoSpecialistas
		{
			get
			{
				return this.GetTable<MedicoSpecialista>();
			}
		}
		
		public System.Data.Linq.Table<Password> Passwords
		{
			get
			{
				return this.GetTable<Password>();
			}
		}
		
		public System.Data.Linq.Table<Paziente> Pazientes
		{
			get
			{
				return this.GetTable<Paziente>();
			}
		}
		
		public System.Data.Linq.Table<Paziente_Sindrome> Paziente_Sindromes
		{
			get
			{
				return this.GetTable<Paziente_Sindrome>();
			}
		}
		
		public System.Data.Linq.Table<Sindrome> Sindromes
		{
			get
			{
				return this.GetTable<Sindrome>();
			}
		}
		
		public System.Data.Linq.Table<Specializzazione> Specializzaziones
		{
			get
			{
				return this.GetTable<Specializzazione>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValoreCampoEsitoEsame")]
	public partial class ValoreCampoEsitoEsame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Valore;
		
		private int _IdEsito;
		
		private EntitySet<Appuntamento_Esame> _Appuntamento_Esames;
		
		private EntityRef<CampoEsitoEsame> _CampoEsitoEsame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValoreChanging(string value);
    partial void OnValoreChanged();
    partial void OnIdEsitoChanging(int value);
    partial void OnIdEsitoChanged();
    #endregion
		
		public ValoreCampoEsitoEsame()
		{
			this._Appuntamento_Esames = new EntitySet<Appuntamento_Esame>(new Action<Appuntamento_Esame>(this.attach_Appuntamento_Esames), new Action<Appuntamento_Esame>(this.detach_Appuntamento_Esames));
			this._CampoEsitoEsame = default(EntityRef<CampoEsitoEsame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valore", DbType="NVarChar(MAX)")]
		public string Valore
		{
			get
			{
				return this._Valore;
			}
			set
			{
				if ((this._Valore != value))
				{
					this.OnValoreChanging(value);
					this.SendPropertyChanging();
					this._Valore = value;
					this.SendPropertyChanged("Valore");
					this.OnValoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEsito", DbType="Int NOT NULL")]
		public int IdEsito
		{
			get
			{
				return this._IdEsito;
			}
			set
			{
				if ((this._IdEsito != value))
				{
					if (this._CampoEsitoEsame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEsitoChanging(value);
					this.SendPropertyChanging();
					this._IdEsito = value;
					this.SendPropertyChanged("IdEsito");
					this.OnIdEsitoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValoreCampoEsitoEsame_Appuntamento_Esame", Storage="_Appuntamento_Esames", ThisKey="Id", OtherKey="IdValore")]
		public EntitySet<Appuntamento_Esame> Appuntamento_Esames
		{
			get
			{
				return this._Appuntamento_Esames;
			}
			set
			{
				this._Appuntamento_Esames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CampoEsitoEsame_ValoreCampoEsitoEsame", Storage="_CampoEsitoEsame", ThisKey="IdEsito", OtherKey="Id", IsForeignKey=true)]
		public CampoEsitoEsame CampoEsitoEsame
		{
			get
			{
				return this._CampoEsitoEsame.Entity;
			}
			set
			{
				CampoEsitoEsame previousValue = this._CampoEsitoEsame.Entity;
				if (((previousValue != value) 
							|| (this._CampoEsitoEsame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CampoEsitoEsame.Entity = null;
						previousValue.ValoreCampoEsitoEsames.Remove(this);
					}
					this._CampoEsitoEsame.Entity = value;
					if ((value != null))
					{
						value.ValoreCampoEsitoEsames.Add(this);
						this._IdEsito = value.Id;
					}
					else
					{
						this._IdEsito = default(int);
					}
					this.SendPropertyChanged("CampoEsitoEsame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.ValoreCampoEsitoEsame = this;
		}
		
		private void detach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.ValoreCampoEsitoEsame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appuntamento")]
	public partial class Appuntamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Data;
		
		private System.TimeSpan _Ora;
		
		private bool _Chiuso;
		
		private int _IdPaziente;
		
		private EntitySet<Appuntamento_Esame> _Appuntamento_Esames;
		
		private EntityRef<Paziente> _Paziente;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDataChanging(System.DateTime value);
    partial void OnDataChanged();
    partial void OnOraChanging(System.TimeSpan value);
    partial void OnOraChanged();
    partial void OnChiusoChanging(bool value);
    partial void OnChiusoChanged();
    partial void OnIdPazienteChanging(int value);
    partial void OnIdPazienteChanged();
    #endregion
		
		public Appuntamento()
		{
			this._Appuntamento_Esames = new EntitySet<Appuntamento_Esame>(new Action<Appuntamento_Esame>(this.attach_Appuntamento_Esames), new Action<Appuntamento_Esame>(this.detach_Appuntamento_Esames));
			this._Paziente = default(EntityRef<Paziente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Date NOT NULL")]
		public System.DateTime Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ora", DbType="Time NOT NULL")]
		public System.TimeSpan Ora
		{
			get
			{
				return this._Ora;
			}
			set
			{
				if ((this._Ora != value))
				{
					this.OnOraChanging(value);
					this.SendPropertyChanging();
					this._Ora = value;
					this.SendPropertyChanged("Ora");
					this.OnOraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chiuso", DbType="Bit NOT NULL")]
		public bool Chiuso
		{
			get
			{
				return this._Chiuso;
			}
			set
			{
				if ((this._Chiuso != value))
				{
					this.OnChiusoChanging(value);
					this.SendPropertyChanging();
					this._Chiuso = value;
					this.SendPropertyChanged("Chiuso");
					this.OnChiusoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaziente", DbType="Int NOT NULL")]
		public int IdPaziente
		{
			get
			{
				return this._IdPaziente;
			}
			set
			{
				if ((this._IdPaziente != value))
				{
					if (this._Paziente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPazienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaziente = value;
					this.SendPropertyChanged("IdPaziente");
					this.OnIdPazienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appuntamento_Appuntamento_Esame", Storage="_Appuntamento_Esames", ThisKey="Id", OtherKey="IdAppuntamento")]
		public EntitySet<Appuntamento_Esame> Appuntamento_Esames
		{
			get
			{
				return this._Appuntamento_Esames;
			}
			set
			{
				this._Appuntamento_Esames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paziente_Appuntamento", Storage="_Paziente", ThisKey="IdPaziente", OtherKey="Id", IsForeignKey=true)]
		public Paziente Paziente
		{
			get
			{
				return this._Paziente.Entity;
			}
			set
			{
				Paziente previousValue = this._Paziente.Entity;
				if (((previousValue != value) 
							|| (this._Paziente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paziente.Entity = null;
						previousValue.Appuntamentos.Remove(this);
					}
					this._Paziente.Entity = value;
					if ((value != null))
					{
						value.Appuntamentos.Add(this);
						this._IdPaziente = value.Id;
					}
					else
					{
						this._IdPaziente = default(int);
					}
					this.SendPropertyChanged("Paziente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.Appuntamento = this;
		}
		
		private void detach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.Appuntamento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appuntamento_Esame")]
	public partial class Appuntamento_Esame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAppuntamento;
		
		private int _IdEsame;
		
		private System.Nullable<int> _IdEsito;
		
		private System.Nullable<int> _IdValore;
		
		private EntityRef<Appuntamento> _Appuntamento;
		
		private EntityRef<ValoreCampoEsitoEsame> _ValoreCampoEsitoEsame;
		
		private EntityRef<CampoEsitoEsame> _CampoEsitoEsame;
		
		private EntityRef<Esame> _Esame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAppuntamentoChanging(int value);
    partial void OnIdAppuntamentoChanged();
    partial void OnIdEsameChanging(int value);
    partial void OnIdEsameChanged();
    partial void OnIdEsitoChanging(System.Nullable<int> value);
    partial void OnIdEsitoChanged();
    partial void OnIdValoreChanging(System.Nullable<int> value);
    partial void OnIdValoreChanged();
    #endregion
		
		public Appuntamento_Esame()
		{
			this._Appuntamento = default(EntityRef<Appuntamento>);
			this._ValoreCampoEsitoEsame = default(EntityRef<ValoreCampoEsitoEsame>);
			this._CampoEsitoEsame = default(EntityRef<CampoEsitoEsame>);
			this._Esame = default(EntityRef<Esame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAppuntamento", DbType="Int NOT NULL")]
		public int IdAppuntamento
		{
			get
			{
				return this._IdAppuntamento;
			}
			set
			{
				if ((this._IdAppuntamento != value))
				{
					if (this._Appuntamento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAppuntamentoChanging(value);
					this.SendPropertyChanging();
					this._IdAppuntamento = value;
					this.SendPropertyChanged("IdAppuntamento");
					this.OnIdAppuntamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEsame", DbType="Int NOT NULL")]
		public int IdEsame
		{
			get
			{
				return this._IdEsame;
			}
			set
			{
				if ((this._IdEsame != value))
				{
					if (this._Esame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEsameChanging(value);
					this.SendPropertyChanging();
					this._IdEsame = value;
					this.SendPropertyChanged("IdEsame");
					this.OnIdEsameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEsito", DbType="Int")]
		public System.Nullable<int> IdEsito
		{
			get
			{
				return this._IdEsito;
			}
			set
			{
				if ((this._IdEsito != value))
				{
					if (this._CampoEsitoEsame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEsitoChanging(value);
					this.SendPropertyChanging();
					this._IdEsito = value;
					this.SendPropertyChanged("IdEsito");
					this.OnIdEsitoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdValore", DbType="Int")]
		public System.Nullable<int> IdValore
		{
			get
			{
				return this._IdValore;
			}
			set
			{
				if ((this._IdValore != value))
				{
					if (this._ValoreCampoEsitoEsame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdValoreChanging(value);
					this.SendPropertyChanging();
					this._IdValore = value;
					this.SendPropertyChanged("IdValore");
					this.OnIdValoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appuntamento_Appuntamento_Esame", Storage="_Appuntamento", ThisKey="IdAppuntamento", OtherKey="Id", IsForeignKey=true)]
		public Appuntamento Appuntamento
		{
			get
			{
				return this._Appuntamento.Entity;
			}
			set
			{
				Appuntamento previousValue = this._Appuntamento.Entity;
				if (((previousValue != value) 
							|| (this._Appuntamento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appuntamento.Entity = null;
						previousValue.Appuntamento_Esames.Remove(this);
					}
					this._Appuntamento.Entity = value;
					if ((value != null))
					{
						value.Appuntamento_Esames.Add(this);
						this._IdAppuntamento = value.Id;
					}
					else
					{
						this._IdAppuntamento = default(int);
					}
					this.SendPropertyChanged("Appuntamento");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ValoreCampoEsitoEsame_Appuntamento_Esame", Storage="_ValoreCampoEsitoEsame", ThisKey="IdValore", OtherKey="Id", IsForeignKey=true)]
		public ValoreCampoEsitoEsame ValoreCampoEsitoEsame
		{
			get
			{
				return this._ValoreCampoEsitoEsame.Entity;
			}
			set
			{
				ValoreCampoEsitoEsame previousValue = this._ValoreCampoEsitoEsame.Entity;
				if (((previousValue != value) 
							|| (this._ValoreCampoEsitoEsame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValoreCampoEsitoEsame.Entity = null;
						previousValue.Appuntamento_Esames.Remove(this);
					}
					this._ValoreCampoEsitoEsame.Entity = value;
					if ((value != null))
					{
						value.Appuntamento_Esames.Add(this);
						this._IdValore = value.Id;
					}
					else
					{
						this._IdValore = default(Nullable<int>);
					}
					this.SendPropertyChanged("ValoreCampoEsitoEsame");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CampoEsitoEsame_Appuntamento_Esame", Storage="_CampoEsitoEsame", ThisKey="IdEsito", OtherKey="Id", IsForeignKey=true)]
		public CampoEsitoEsame CampoEsitoEsame
		{
			get
			{
				return this._CampoEsitoEsame.Entity;
			}
			set
			{
				CampoEsitoEsame previousValue = this._CampoEsitoEsame.Entity;
				if (((previousValue != value) 
							|| (this._CampoEsitoEsame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CampoEsitoEsame.Entity = null;
						previousValue.Appuntamento_Esames.Remove(this);
					}
					this._CampoEsitoEsame.Entity = value;
					if ((value != null))
					{
						value.Appuntamento_Esames.Add(this);
						this._IdEsito = value.Id;
					}
					else
					{
						this._IdEsito = default(Nullable<int>);
					}
					this.SendPropertyChanged("CampoEsitoEsame");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Esame_Appuntamento_Esame", Storage="_Esame", ThisKey="IdEsame", OtherKey="Id", IsForeignKey=true)]
		public Esame Esame
		{
			get
			{
				return this._Esame.Entity;
			}
			set
			{
				Esame previousValue = this._Esame.Entity;
				if (((previousValue != value) 
							|| (this._Esame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Esame.Entity = null;
						previousValue.Appuntamento_Esames.Remove(this);
					}
					this._Esame.Entity = value;
					if ((value != null))
					{
						value.Appuntamento_Esames.Add(this);
						this._IdEsame = value.Id;
					}
					else
					{
						this._IdEsame = default(int);
					}
					this.SendPropertyChanged("Esame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CampoEsitoEsame")]
	public partial class CampoEsitoEsame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private int _IdEsame;
		
		private EntitySet<ValoreCampoEsitoEsame> _ValoreCampoEsitoEsames;
		
		private EntitySet<Appuntamento_Esame> _Appuntamento_Esames;
		
		private EntityRef<Esame> _Esame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnIdEsameChanging(int value);
    partial void OnIdEsameChanged();
    #endregion
		
		public CampoEsitoEsame()
		{
			this._ValoreCampoEsitoEsames = new EntitySet<ValoreCampoEsitoEsame>(new Action<ValoreCampoEsitoEsame>(this.attach_ValoreCampoEsitoEsames), new Action<ValoreCampoEsitoEsame>(this.detach_ValoreCampoEsitoEsames));
			this._Appuntamento_Esames = new EntitySet<Appuntamento_Esame>(new Action<Appuntamento_Esame>(this.attach_Appuntamento_Esames), new Action<Appuntamento_Esame>(this.detach_Appuntamento_Esames));
			this._Esame = default(EntityRef<Esame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEsame", DbType="Int NOT NULL")]
		public int IdEsame
		{
			get
			{
				return this._IdEsame;
			}
			set
			{
				if ((this._IdEsame != value))
				{
					if (this._Esame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEsameChanging(value);
					this.SendPropertyChanging();
					this._IdEsame = value;
					this.SendPropertyChanged("IdEsame");
					this.OnIdEsameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CampoEsitoEsame_ValoreCampoEsitoEsame", Storage="_ValoreCampoEsitoEsames", ThisKey="Id", OtherKey="IdEsito")]
		public EntitySet<ValoreCampoEsitoEsame> ValoreCampoEsitoEsames
		{
			get
			{
				return this._ValoreCampoEsitoEsames;
			}
			set
			{
				this._ValoreCampoEsitoEsames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CampoEsitoEsame_Appuntamento_Esame", Storage="_Appuntamento_Esames", ThisKey="Id", OtherKey="IdEsito")]
		public EntitySet<Appuntamento_Esame> Appuntamento_Esames
		{
			get
			{
				return this._Appuntamento_Esames;
			}
			set
			{
				this._Appuntamento_Esames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Esame_CampoEsitoEsame", Storage="_Esame", ThisKey="IdEsame", OtherKey="Id", IsForeignKey=true)]
		public Esame Esame
		{
			get
			{
				return this._Esame.Entity;
			}
			set
			{
				Esame previousValue = this._Esame.Entity;
				if (((previousValue != value) 
							|| (this._Esame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Esame.Entity = null;
						previousValue.CampoEsitoEsames.Remove(this);
					}
					this._Esame.Entity = value;
					if ((value != null))
					{
						value.CampoEsitoEsames.Add(this);
						this._IdEsame = value.Id;
					}
					else
					{
						this._IdEsame = default(int);
					}
					this.SendPropertyChanged("Esame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ValoreCampoEsitoEsames(ValoreCampoEsitoEsame entity)
		{
			this.SendPropertyChanging();
			entity.CampoEsitoEsame = this;
		}
		
		private void detach_ValoreCampoEsitoEsames(ValoreCampoEsitoEsame entity)
		{
			this.SendPropertyChanging();
			entity.CampoEsitoEsame = null;
		}
		
		private void attach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.CampoEsitoEsame = this;
		}
		
		private void detach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.CampoEsitoEsame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Esame")]
	public partial class Esame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private int _IdMedicoSpecialista;
		
		private EntitySet<Appuntamento_Esame> _Appuntamento_Esames;
		
		private EntitySet<CampoEsitoEsame> _CampoEsitoEsames;
		
		private EntityRef<MedicoSpecialista> _MedicoSpecialista;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnIdMedicoSpecialistaChanging(int value);
    partial void OnIdMedicoSpecialistaChanged();
    #endregion
		
		public Esame()
		{
			this._Appuntamento_Esames = new EntitySet<Appuntamento_Esame>(new Action<Appuntamento_Esame>(this.attach_Appuntamento_Esames), new Action<Appuntamento_Esame>(this.detach_Appuntamento_Esames));
			this._CampoEsitoEsames = new EntitySet<CampoEsitoEsame>(new Action<CampoEsitoEsame>(this.attach_CampoEsitoEsames), new Action<CampoEsitoEsame>(this.detach_CampoEsitoEsames));
			this._MedicoSpecialista = default(EntityRef<MedicoSpecialista>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicoSpecialista", DbType="Int NOT NULL")]
		public int IdMedicoSpecialista
		{
			get
			{
				return this._IdMedicoSpecialista;
			}
			set
			{
				if ((this._IdMedicoSpecialista != value))
				{
					if (this._MedicoSpecialista.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicoSpecialistaChanging(value);
					this.SendPropertyChanging();
					this._IdMedicoSpecialista = value;
					this.SendPropertyChanged("IdMedicoSpecialista");
					this.OnIdMedicoSpecialistaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Esame_Appuntamento_Esame", Storage="_Appuntamento_Esames", ThisKey="Id", OtherKey="IdEsame")]
		public EntitySet<Appuntamento_Esame> Appuntamento_Esames
		{
			get
			{
				return this._Appuntamento_Esames;
			}
			set
			{
				this._Appuntamento_Esames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Esame_CampoEsitoEsame", Storage="_CampoEsitoEsames", ThisKey="Id", OtherKey="IdEsame")]
		public EntitySet<CampoEsitoEsame> CampoEsitoEsames
		{
			get
			{
				return this._CampoEsitoEsames;
			}
			set
			{
				this._CampoEsitoEsames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicoSpecialista_Esame", Storage="_MedicoSpecialista", ThisKey="IdMedicoSpecialista", OtherKey="Id", IsForeignKey=true)]
		public MedicoSpecialista MedicoSpecialista
		{
			get
			{
				return this._MedicoSpecialista.Entity;
			}
			set
			{
				MedicoSpecialista previousValue = this._MedicoSpecialista.Entity;
				if (((previousValue != value) 
							|| (this._MedicoSpecialista.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicoSpecialista.Entity = null;
						previousValue.Esames.Remove(this);
					}
					this._MedicoSpecialista.Entity = value;
					if ((value != null))
					{
						value.Esames.Add(this);
						this._IdMedicoSpecialista = value.Id;
					}
					else
					{
						this._IdMedicoSpecialista = default(int);
					}
					this.SendPropertyChanged("MedicoSpecialista");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.Esame = this;
		}
		
		private void detach_Appuntamento_Esames(Appuntamento_Esame entity)
		{
			this.SendPropertyChanging();
			entity.Esame = null;
		}
		
		private void attach_CampoEsitoEsames(CampoEsitoEsame entity)
		{
			this.SendPropertyChanging();
			entity.Esame = this;
		}
		
		private void detach_CampoEsitoEsames(CampoEsitoEsame entity)
		{
			this.SendPropertyChanging();
			entity.Esame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicoGenerico")]
	public partial class MedicoGenerico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Cognome;
		
		private EntitySet<Paziente> _Pazientes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCognomeChanging(string value);
    partial void OnCognomeChanged();
    #endregion
		
		public MedicoGenerico()
		{
			this._Pazientes = new EntitySet<Paziente>(new Action<Paziente>(this.attach_Pazientes), new Action<Paziente>(this.detach_Pazientes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cognome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Cognome
		{
			get
			{
				return this._Cognome;
			}
			set
			{
				if ((this._Cognome != value))
				{
					this.OnCognomeChanging(value);
					this.SendPropertyChanging();
					this._Cognome = value;
					this.SendPropertyChanged("Cognome");
					this.OnCognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicoGenerico_Paziente", Storage="_Pazientes", ThisKey="Id", OtherKey="IdMedicoCurante")]
		public EntitySet<Paziente> Pazientes
		{
			get
			{
				return this._Pazientes;
			}
			set
			{
				this._Pazientes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pazientes(Paziente entity)
		{
			this.SendPropertyChanging();
			entity.MedicoGenerico = this;
		}
		
		private void detach_Pazientes(Paziente entity)
		{
			this.SendPropertyChanging();
			entity.MedicoGenerico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicoSpecialista")]
	public partial class MedicoSpecialista : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Cognome;
		
		private int _IdSpecializzazione;
		
		private EntitySet<Esame> _Esames;
		
		private EntityRef<Specializzazione> _Specializzazione;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCognomeChanging(string value);
    partial void OnCognomeChanged();
    partial void OnIdSpecializzazioneChanging(int value);
    partial void OnIdSpecializzazioneChanged();
    #endregion
		
		public MedicoSpecialista()
		{
			this._Esames = new EntitySet<Esame>(new Action<Esame>(this.attach_Esames), new Action<Esame>(this.detach_Esames));
			this._Specializzazione = default(EntityRef<Specializzazione>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cognome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Cognome
		{
			get
			{
				return this._Cognome;
			}
			set
			{
				if ((this._Cognome != value))
				{
					this.OnCognomeChanging(value);
					this.SendPropertyChanging();
					this._Cognome = value;
					this.SendPropertyChanged("Cognome");
					this.OnCognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSpecializzazione", DbType="Int NOT NULL")]
		public int IdSpecializzazione
		{
			get
			{
				return this._IdSpecializzazione;
			}
			set
			{
				if ((this._IdSpecializzazione != value))
				{
					if (this._Specializzazione.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSpecializzazioneChanging(value);
					this.SendPropertyChanging();
					this._IdSpecializzazione = value;
					this.SendPropertyChanged("IdSpecializzazione");
					this.OnIdSpecializzazioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicoSpecialista_Esame", Storage="_Esames", ThisKey="Id", OtherKey="IdMedicoSpecialista")]
		public EntitySet<Esame> Esames
		{
			get
			{
				return this._Esames;
			}
			set
			{
				this._Esames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializzazione_MedicoSpecialista", Storage="_Specializzazione", ThisKey="IdSpecializzazione", OtherKey="Id", IsForeignKey=true)]
		public Specializzazione Specializzazione
		{
			get
			{
				return this._Specializzazione.Entity;
			}
			set
			{
				Specializzazione previousValue = this._Specializzazione.Entity;
				if (((previousValue != value) 
							|| (this._Specializzazione.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specializzazione.Entity = null;
						previousValue.MedicoSpecialistas.Remove(this);
					}
					this._Specializzazione.Entity = value;
					if ((value != null))
					{
						value.MedicoSpecialistas.Add(this);
						this._IdSpecializzazione = value.Id;
					}
					else
					{
						this._IdSpecializzazione = default(int);
					}
					this.SendPropertyChanged("Specializzazione");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Esames(Esame entity)
		{
			this.SendPropertyChanging();
			entity.MedicoSpecialista = this;
		}
		
		private void detach_Esames(Esame entity)
		{
			this.SendPropertyChanging();
			entity.MedicoSpecialista = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Password")]
	public partial class Password : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PasswordAttuale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPasswordAttualeChanging(string value);
    partial void OnPasswordAttualeChanged();
    #endregion
		
		public Password()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAttuale", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PasswordAttuale
		{
			get
			{
				return this._PasswordAttuale;
			}
			set
			{
				if ((this._PasswordAttuale != value))
				{
					this.OnPasswordAttualeChanging(value);
					this.SendPropertyChanging();
					this._PasswordAttuale = value;
					this.SendPropertyChanged("PasswordAttuale");
					this.OnPasswordAttualeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paziente")]
	public partial class Paziente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Cognome;
		
		private System.Nullable<System.DateTime> _DataNascita;
		
		private System.Nullable<char> _Sesso;
		
		private string _CodiceFiscale;
		
		private string _TelefonoCellulare;
		
		private string _TelefonoFisso;
		
		private System.Nullable<int> _IdMedicoCurante;
		
		private EntitySet<Appuntamento> _Appuntamentos;
		
		private EntitySet<Paziente_Sindrome> _Paziente_Sindromes;
		
		private EntityRef<MedicoGenerico> _MedicoGenerico;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCognomeChanging(string value);
    partial void OnCognomeChanged();
    partial void OnDataNascitaChanging(System.Nullable<System.DateTime> value);
    partial void OnDataNascitaChanged();
    partial void OnSessoChanging(System.Nullable<char> value);
    partial void OnSessoChanged();
    partial void OnCodiceFiscaleChanging(string value);
    partial void OnCodiceFiscaleChanged();
    partial void OnTelefonoCellulareChanging(string value);
    partial void OnTelefonoCellulareChanged();
    partial void OnTelefonoFissoChanging(string value);
    partial void OnTelefonoFissoChanged();
    partial void OnIdMedicoCuranteChanging(System.Nullable<int> value);
    partial void OnIdMedicoCuranteChanged();
    #endregion
		
		public Paziente()
		{
			this._Appuntamentos = new EntitySet<Appuntamento>(new Action<Appuntamento>(this.attach_Appuntamentos), new Action<Appuntamento>(this.detach_Appuntamentos));
			this._Paziente_Sindromes = new EntitySet<Paziente_Sindrome>(new Action<Paziente_Sindrome>(this.attach_Paziente_Sindromes), new Action<Paziente_Sindrome>(this.detach_Paziente_Sindromes));
			this._MedicoGenerico = default(EntityRef<MedicoGenerico>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cognome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Cognome
		{
			get
			{
				return this._Cognome;
			}
			set
			{
				if ((this._Cognome != value))
				{
					this.OnCognomeChanging(value);
					this.SendPropertyChanging();
					this._Cognome = value;
					this.SendPropertyChanged("Cognome");
					this.OnCognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataNascita", DbType="Date")]
		public System.Nullable<System.DateTime> DataNascita
		{
			get
			{
				return this._DataNascita;
			}
			set
			{
				if ((this._DataNascita != value))
				{
					this.OnDataNascitaChanging(value);
					this.SendPropertyChanging();
					this._DataNascita = value;
					this.SendPropertyChanged("DataNascita");
					this.OnDataNascitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sesso", DbType="Char(1)")]
		public System.Nullable<char> Sesso
		{
			get
			{
				return this._Sesso;
			}
			set
			{
				if ((this._Sesso != value))
				{
					this.OnSessoChanging(value);
					this.SendPropertyChanging();
					this._Sesso = value;
					this.SendPropertyChanged("Sesso");
					this.OnSessoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodiceFiscale", DbType="NChar(16)")]
		public string CodiceFiscale
		{
			get
			{
				return this._CodiceFiscale;
			}
			set
			{
				if ((this._CodiceFiscale != value))
				{
					this.OnCodiceFiscaleChanging(value);
					this.SendPropertyChanging();
					this._CodiceFiscale = value;
					this.SendPropertyChanged("CodiceFiscale");
					this.OnCodiceFiscaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelefonoCellulare", DbType="NVarChar(20)")]
		public string TelefonoCellulare
		{
			get
			{
				return this._TelefonoCellulare;
			}
			set
			{
				if ((this._TelefonoCellulare != value))
				{
					this.OnTelefonoCellulareChanging(value);
					this.SendPropertyChanging();
					this._TelefonoCellulare = value;
					this.SendPropertyChanged("TelefonoCellulare");
					this.OnTelefonoCellulareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelefonoFisso", DbType="NVarChar(20)")]
		public string TelefonoFisso
		{
			get
			{
				return this._TelefonoFisso;
			}
			set
			{
				if ((this._TelefonoFisso != value))
				{
					this.OnTelefonoFissoChanging(value);
					this.SendPropertyChanging();
					this._TelefonoFisso = value;
					this.SendPropertyChanged("TelefonoFisso");
					this.OnTelefonoFissoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicoCurante", DbType="Int")]
		public System.Nullable<int> IdMedicoCurante
		{
			get
			{
				return this._IdMedicoCurante;
			}
			set
			{
				if ((this._IdMedicoCurante != value))
				{
					if (this._MedicoGenerico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicoCuranteChanging(value);
					this.SendPropertyChanging();
					this._IdMedicoCurante = value;
					this.SendPropertyChanged("IdMedicoCurante");
					this.OnIdMedicoCuranteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paziente_Appuntamento", Storage="_Appuntamentos", ThisKey="Id", OtherKey="IdPaziente")]
		public EntitySet<Appuntamento> Appuntamentos
		{
			get
			{
				return this._Appuntamentos;
			}
			set
			{
				this._Appuntamentos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paziente_Paziente_Sindrome", Storage="_Paziente_Sindromes", ThisKey="Id", OtherKey="IdPaziente")]
		public EntitySet<Paziente_Sindrome> Paziente_Sindromes
		{
			get
			{
				return this._Paziente_Sindromes;
			}
			set
			{
				this._Paziente_Sindromes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicoGenerico_Paziente", Storage="_MedicoGenerico", ThisKey="IdMedicoCurante", OtherKey="Id", IsForeignKey=true)]
		public MedicoGenerico MedicoGenerico
		{
			get
			{
				return this._MedicoGenerico.Entity;
			}
			set
			{
				MedicoGenerico previousValue = this._MedicoGenerico.Entity;
				if (((previousValue != value) 
							|| (this._MedicoGenerico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicoGenerico.Entity = null;
						previousValue.Pazientes.Remove(this);
					}
					this._MedicoGenerico.Entity = value;
					if ((value != null))
					{
						value.Pazientes.Add(this);
						this._IdMedicoCurante = value.Id;
					}
					else
					{
						this._IdMedicoCurante = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicoGenerico");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appuntamentos(Appuntamento entity)
		{
			this.SendPropertyChanging();
			entity.Paziente = this;
		}
		
		private void detach_Appuntamentos(Appuntamento entity)
		{
			this.SendPropertyChanging();
			entity.Paziente = null;
		}
		
		private void attach_Paziente_Sindromes(Paziente_Sindrome entity)
		{
			this.SendPropertyChanging();
			entity.Paziente = this;
		}
		
		private void detach_Paziente_Sindromes(Paziente_Sindrome entity)
		{
			this.SendPropertyChanging();
			entity.Paziente = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paziente_Sindrome")]
	public partial class Paziente_Sindrome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPaziente;
		
		private int _IdSindrome;
		
		private EntityRef<Paziente> _Paziente;
		
		private EntityRef<Sindrome> _Sindrome;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPazienteChanging(int value);
    partial void OnIdPazienteChanged();
    partial void OnIdSindromeChanging(int value);
    partial void OnIdSindromeChanged();
    #endregion
		
		public Paziente_Sindrome()
		{
			this._Paziente = default(EntityRef<Paziente>);
			this._Sindrome = default(EntityRef<Sindrome>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPaziente", DbType="Int NOT NULL")]
		public int IdPaziente
		{
			get
			{
				return this._IdPaziente;
			}
			set
			{
				if ((this._IdPaziente != value))
				{
					if (this._Paziente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPazienteChanging(value);
					this.SendPropertyChanging();
					this._IdPaziente = value;
					this.SendPropertyChanged("IdPaziente");
					this.OnIdPazienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSindrome", DbType="Int NOT NULL")]
		public int IdSindrome
		{
			get
			{
				return this._IdSindrome;
			}
			set
			{
				if ((this._IdSindrome != value))
				{
					if (this._Sindrome.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSindromeChanging(value);
					this.SendPropertyChanging();
					this._IdSindrome = value;
					this.SendPropertyChanged("IdSindrome");
					this.OnIdSindromeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paziente_Paziente_Sindrome", Storage="_Paziente", ThisKey="IdPaziente", OtherKey="Id", IsForeignKey=true)]
		public Paziente Paziente
		{
			get
			{
				return this._Paziente.Entity;
			}
			set
			{
				Paziente previousValue = this._Paziente.Entity;
				if (((previousValue != value) 
							|| (this._Paziente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paziente.Entity = null;
						previousValue.Paziente_Sindromes.Remove(this);
					}
					this._Paziente.Entity = value;
					if ((value != null))
					{
						value.Paziente_Sindromes.Add(this);
						this._IdPaziente = value.Id;
					}
					else
					{
						this._IdPaziente = default(int);
					}
					this.SendPropertyChanged("Paziente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sindrome_Paziente_Sindrome", Storage="_Sindrome", ThisKey="IdSindrome", OtherKey="Id", IsForeignKey=true)]
		public Sindrome Sindrome
		{
			get
			{
				return this._Sindrome.Entity;
			}
			set
			{
				Sindrome previousValue = this._Sindrome.Entity;
				if (((previousValue != value) 
							|| (this._Sindrome.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sindrome.Entity = null;
						previousValue.Paziente_Sindromes.Remove(this);
					}
					this._Sindrome.Entity = value;
					if ((value != null))
					{
						value.Paziente_Sindromes.Add(this);
						this._IdSindrome = value.Id;
					}
					else
					{
						this._IdSindrome = default(int);
					}
					this.SendPropertyChanged("Sindrome");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sindrome")]
	public partial class Sindrome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<Paziente_Sindrome> _Paziente_Sindromes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Sindrome()
		{
			this._Paziente_Sindromes = new EntitySet<Paziente_Sindrome>(new Action<Paziente_Sindrome>(this.attach_Paziente_Sindromes), new Action<Paziente_Sindrome>(this.detach_Paziente_Sindromes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sindrome_Paziente_Sindrome", Storage="_Paziente_Sindromes", ThisKey="Id", OtherKey="IdSindrome")]
		public EntitySet<Paziente_Sindrome> Paziente_Sindromes
		{
			get
			{
				return this._Paziente_Sindromes;
			}
			set
			{
				this._Paziente_Sindromes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paziente_Sindromes(Paziente_Sindrome entity)
		{
			this.SendPropertyChanging();
			entity.Sindrome = this;
		}
		
		private void detach_Paziente_Sindromes(Paziente_Sindrome entity)
		{
			this.SendPropertyChanging();
			entity.Sindrome = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specializzazione")]
	public partial class Specializzazione : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<MedicoSpecialista> _MedicoSpecialistas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Specializzazione()
		{
			this._MedicoSpecialistas = new EntitySet<MedicoSpecialista>(new Action<MedicoSpecialista>(this.attach_MedicoSpecialistas), new Action<MedicoSpecialista>(this.detach_MedicoSpecialistas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializzazione_MedicoSpecialista", Storage="_MedicoSpecialistas", ThisKey="Id", OtherKey="IdSpecializzazione")]
		public EntitySet<MedicoSpecialista> MedicoSpecialistas
		{
			get
			{
				return this._MedicoSpecialistas;
			}
			set
			{
				this._MedicoSpecialistas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicoSpecialistas(MedicoSpecialista entity)
		{
			this.SendPropertyChanging();
			entity.Specializzazione = this;
		}
		
		private void detach_MedicoSpecialistas(MedicoSpecialista entity)
		{
			this.SendPropertyChanging();
			entity.Specializzazione = null;
		}
	}
}
#pragma warning restore 1591
